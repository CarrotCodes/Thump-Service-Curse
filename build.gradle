buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

repositories {
    maven { // Hopper Maven repo
        name 'Hopper'
        url "https://maven.hopper.bunnies.io/"
    }
}

apply plugin: 'kotlin'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'idea'

idea {
    module {
        downloadSources = true
    }
}

version = minecraft_version + '-' + version_major + '.' + version_minor + '.' + version_patch
group = "engineer.carrot.warren.thump.cursevoice"
archivesBaseName = "Thump-Service-CurseVoice"

if (System.getenv().BUILD_NUMBER != null) {//adds the build number to the end of the version string if on a build server
    version += ".${System.getenv().BUILD_NUMBER}"
}

// java version
sourceCompatibility = 1.7
targetCompatibility = 1.7

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    main.java.srcDirs += 'src/main/java'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

task copyKotlinFiles(type: Copy) {
    dependsOn 'sourceMainJava'

    from('src/main/kotlin/')
    into('build/sources/main/java/')
}

compileKotlin { dependsOn 'copyKotlinFiles'; source = file('build/sources/main/java') }

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile group: 'org.slf4j', name:'slf4j-api', version: '1.7.21'
    compile "engineer.carrot.warren.thump:Thump:$thump_version"
}

minecraft {
    version = minecraft_version + "-" + forge_version
    runDir = "run"

    replace '@VERSION@', project.version
    replace '@KOTLIN_VERSION@', kotlin_version

    mappings = "snapshot_20160519"
}

reobf {
    jar {
        extraLines += [ 'PK: org/slf4j engineer/carrot/warren/thump/slf4j' ]
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and minecraft_version
        expand 'version': project.version, 'minecraft_version': project.minecraft.version
    }

    // copy everything else, that's not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

def env = System.getenv()

// Get Jenkins metadata
ext.jenkinsManifest = manifest {
    if (env.BUILD_TAG != null) { // If this works, we'll assume we're in Jenkins at least.
        attributes("Jenkins-Build": "true", "Jenkins-Tag": env.BUILD_TAG, "Jenkins-ID": env.BUILD_ID)
    } else {
        attributes("Jenkins-Build": "false")
    }
}

// Get Git metadata (if in Jenkins)
ext.gitManifest = manifest {
    if (env.GIT_BRANCH != null) {
        attributes("Git-Branch": env.GIT_BRANCH, "Git-Hash": env.GIT_COMMIT)
    }
}

jar {
    // Grab deps for shading
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }

    // Merge Jenkins and Git manifests to form final manifest in final release jar
    manifest {
        from jenkinsManifest, gitManifest
    }
}


// Dev jars
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

// Maven deployment
apply plugin: 'maven'

if (!project.hasProperty("DEPLOY_DIR")) {
    ext.DEPLOY_DIR = null
}

artifacts {
    archives deobfJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://${DEPLOY_DIR}")
        }
    }
}

uploadArchives.onlyIf { return DEPLOY_DIR != null }
