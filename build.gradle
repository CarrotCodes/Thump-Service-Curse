buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "JetBrains Kotlin EAP"
            url = "http://dl.bintray.com/kotlin/kotlin-eap-1.1"
        }
        maven {
            name = "Gradle repo"
            url = "https://repo.gradle.org/gradle/repo"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

repositories {
    mavenCentral()

    maven { // Hopper Maven repo
        name 'Hopper'
        url "https://maven.hopper.bunnies.io/"
    }

    maven {
        name = "JetBrains Kotlin EAP"
        url = "http://dl.bintray.com/kotlin/kotlin-eap-1.1"
    }

    maven {
        name = "Gradle repo"
        url = "https://repo.gradle.org/gradle/repo"
    }

    maven {
        name = 'DVS1'
        url = 'http://dvs1.progwml6.com/files/maven'
    }
}

apply plugin: 'kotlin'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'idea'
apply plugin: 'com.github.johnrengelman.shadow'

idea {
    module {
        downloadSources = true
    }
}

version = minecraft_version + '-' + version_major + '.' + version_minor + '.' + version_patch
group = "engineer.carrot.warren.thump-curse"
archivesBaseName = "Thump-Service-Curse"

if (System.getenv().BUILD_NUMBER != null) {//adds the build number to the end of the version string if on a build server
    version += ".${System.getenv().BUILD_NUMBER}"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    main.java.srcDirs += 'src/main/java'
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}

dependencies {
    compile "com.feed_the_beast:javacurseapi:$javacurselib_version:mcnoslf4j"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile group: 'org.slf4j', name:'slf4j-api', version: '1.7.21' //shaded in javacurselib mc jar already

    compile "engineer.carrot.warren.thump:Thump:$thump_version"
}

minecraft {
    version = minecraft_version + "-" + forge_version
    runDir = "run"

    replace '@VERSION@', project.version
    replace '@KOTLIN_VERSION@', kotlin_version

    mappings = "snapshot_20161227"
}

def env = System.getenv()

// Get Jenkins metadata
ext.jenkinsManifest = manifest {
    if (env.BUILD_TAG != null) { // If this works, we'll assume we're in Jenkins at least.
        attributes("Jenkins-Build": "true", "Jenkins-Tag": env.BUILD_TAG, "Jenkins-ID": env.BUILD_ID)
    } else {
        attributes("Jenkins-Build": "false")
    }
}

// Get Git metadata (if in Jenkins)
ext.gitManifest = manifest {
    if (env.GIT_BRANCH != null) {
        attributes("Git-Branch": env.GIT_BRANCH, "Git-Hash": env.GIT_COMMIT)
    }
}

shadowJar {
    dependsOn reobfJar

    classifier = ""

    mergeServiceFiles()

    relocate 'org.slf4j', 'engineer.carrot.warren.thump.slf4j'
    relocate 'kotlin', 'engineer.carrot.warren.thump.repack.kotlin'
    relocate 'okhttp3', 'engineer.carrot.warren.thump.curse.repack.okhttp3'
    relocate 'javax.websocket', 'engineer.carrot.warren.thump.curse.repack.javax.websocket'
    relocate 'okio', 'engineer.carrot.warren.thump.curse.repack.okio'
    relocate 'org.glassfish.tyrus', 'engineer.carrot.warren.thump.curse.repack.org.glassfish.tyrus'
    relocate 'retrofit2', 'engineer.carrot.warren.thump.curse.repack.retrofit2'
    relocate 'com.feed_the_beast.javacurselib', 'engineer.carrot.warren.thump.curse.repack.com.feed_the_beast.javacurselib'
    relocate 'lombok', 'engineer.carrot.warren.thump.curse.repack.lombock'
    relocate 'com.google.gson', 'engineer.carrot.warren.thump.curse.repack.gson'

    manifest {
        from jenkinsManifest, gitManifest
    }

    dependencies {
        exclude(dependency("engineer.carrot.warren.thump:Thump:$thump_version"))
    }
}

reobf {
    shadowJar {
        mappingType = 'SEARGE'
    }
}

configurations {
    // Prevent the following modules from being included in shadowJar
    runtime.exclude module: 'Thump'
    runtime.exclude module: 'Kale'
    runtime.exclude module: 'Warren'
    runtime.exclude module: 'slf4j-api'
    runtime.exclude module: 'kotlin-stdlib'
    runtime.exclude module: 'kotlin-runtime'
    runtime.exclude module: 'guava'
    runtime.exclude module: 'commons-io'
    runtime.exclude module: 'commons-lang3'
    runtime.exclude module: 'commons-compress'
    runtime.exclude module: 'findbugs'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and minecraft_version
        expand 'version': project.version, 'minecraft_version': project.minecraft.version
    }

    // copy everything else, that's not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// Dev jars
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

// Maven deployment
apply plugin: 'maven'

if (!project.hasProperty("DEPLOY_DIR")) {
    ext.DEPLOY_DIR = null
}

artifacts {
    archives deobfJar, shadowJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://${DEPLOY_DIR}")
        }
    }
}

uploadArchives.onlyIf { return DEPLOY_DIR != null }
